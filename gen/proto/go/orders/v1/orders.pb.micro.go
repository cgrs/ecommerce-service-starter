// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orders/v1/orders.proto

package ordersv1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Orders service

func NewOrdersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Orders service

type OrdersService interface {
	Create(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*CreateOrderResponse, error)
	List(ctx context.Context, in *ListOrderRequest, opts ...client.CallOption) (*ListOrderResponse, error)
	Filter(ctx context.Context, in *FilterOrderRequest, opts ...client.CallOption) (*FilterOrderResponse, error)
	Find(ctx context.Context, in *FindOrderRequest, opts ...client.CallOption) (*FindOrderResponse, error)
	Update(ctx context.Context, in *UpdateOrderRequest, opts ...client.CallOption) (*UpdateOrderResponse, error)
	Delete(ctx context.Context, in *DeleteOrderRequest, opts ...client.CallOption) (*DeleteOrderResponse, error)
}

type ordersService struct {
	c    client.Client
	name string
}

func NewOrdersService(name string, c client.Client) OrdersService {
	return &ordersService{
		c:    c,
		name: name,
	}
}

func (c *ordersService) Create(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*CreateOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.Create", in)
	out := new(CreateOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) List(ctx context.Context, in *ListOrderRequest, opts ...client.CallOption) (*ListOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.List", in)
	out := new(ListOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) Filter(ctx context.Context, in *FilterOrderRequest, opts ...client.CallOption) (*FilterOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.Filter", in)
	out := new(FilterOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) Find(ctx context.Context, in *FindOrderRequest, opts ...client.CallOption) (*FindOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.Find", in)
	out := new(FindOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) Update(ctx context.Context, in *UpdateOrderRequest, opts ...client.CallOption) (*UpdateOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.Update", in)
	out := new(UpdateOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) Delete(ctx context.Context, in *DeleteOrderRequest, opts ...client.CallOption) (*DeleteOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.Delete", in)
	out := new(DeleteOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orders service

type OrdersHandler interface {
	Create(context.Context, *CreateOrderRequest, *CreateOrderResponse) error
	List(context.Context, *ListOrderRequest, *ListOrderResponse) error
	Filter(context.Context, *FilterOrderRequest, *FilterOrderResponse) error
	Find(context.Context, *FindOrderRequest, *FindOrderResponse) error
	Update(context.Context, *UpdateOrderRequest, *UpdateOrderResponse) error
	Delete(context.Context, *DeleteOrderRequest, *DeleteOrderResponse) error
}

func RegisterOrdersHandler(s server.Server, hdlr OrdersHandler, opts ...server.HandlerOption) error {
	type orders interface {
		Create(ctx context.Context, in *CreateOrderRequest, out *CreateOrderResponse) error
		List(ctx context.Context, in *ListOrderRequest, out *ListOrderResponse) error
		Filter(ctx context.Context, in *FilterOrderRequest, out *FilterOrderResponse) error
		Find(ctx context.Context, in *FindOrderRequest, out *FindOrderResponse) error
		Update(ctx context.Context, in *UpdateOrderRequest, out *UpdateOrderResponse) error
		Delete(ctx context.Context, in *DeleteOrderRequest, out *DeleteOrderResponse) error
	}
	type Orders struct {
		orders
	}
	h := &ordersHandler{hdlr}
	return s.Handle(s.NewHandler(&Orders{h}, opts...))
}

type ordersHandler struct {
	OrdersHandler
}

func (h *ordersHandler) Create(ctx context.Context, in *CreateOrderRequest, out *CreateOrderResponse) error {
	return h.OrdersHandler.Create(ctx, in, out)
}

func (h *ordersHandler) List(ctx context.Context, in *ListOrderRequest, out *ListOrderResponse) error {
	return h.OrdersHandler.List(ctx, in, out)
}

func (h *ordersHandler) Filter(ctx context.Context, in *FilterOrderRequest, out *FilterOrderResponse) error {
	return h.OrdersHandler.Filter(ctx, in, out)
}

func (h *ordersHandler) Find(ctx context.Context, in *FindOrderRequest, out *FindOrderResponse) error {
	return h.OrdersHandler.Find(ctx, in, out)
}

func (h *ordersHandler) Update(ctx context.Context, in *UpdateOrderRequest, out *UpdateOrderResponse) error {
	return h.OrdersHandler.Update(ctx, in, out)
}

func (h *ordersHandler) Delete(ctx context.Context, in *DeleteOrderRequest, out *DeleteOrderResponse) error {
	return h.OrdersHandler.Delete(ctx, in, out)
}
