// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: items/v1/items.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Item) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for UnitPrice

	return nil
}

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on CreateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetItem() == nil {
		return CreateItemRequestValidationError{
			field:  "Item",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateItemRequestValidationError is the validation error returned by
// CreateItemRequest.Validate if the designated constraints aren't met.
type CreateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemRequestValidationError) ErrorName() string {
	return "CreateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemRequestValidationError{}

// Validate checks the field values on UpdateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateItemRequestValidationError is the validation error returned by
// UpdateItemRequest.Validate if the designated constraints aren't met.
type UpdateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemRequestValidationError) ErrorName() string {
	return "UpdateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemRequestValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on FindItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FindItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// FindItemRequestValidationError is the validation error returned by
// FindItemRequest.Validate if the designated constraints aren't met.
type FindItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindItemRequestValidationError) ErrorName() string { return "FindItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindItemRequestValidationError{}
