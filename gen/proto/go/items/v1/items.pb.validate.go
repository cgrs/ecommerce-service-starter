// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: items/v1/items.proto

package itemsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _items_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Item) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			return ItemValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	}

	// no validation rules for Name

	// no validation rules for Description

	if m.GetUnitPrice() < 0 {
		return ItemValidationError{
			field:  "UnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

func (m *Item) _validateUuid(uuid string) error {
	if matched := _items_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on CreateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetItem() == nil {
		return CreateItemRequestValidationError{
			field:  "Item",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateItemRequestValidationError is the validation error returned by
// CreateItemRequest.Validate if the designated constraints aren't met.
type CreateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemRequestValidationError) ErrorName() string {
	return "CreateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemRequestValidationError{}

// Validate checks the field values on CreateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateItemResponseValidationError is the validation error returned by
// CreateItemResponse.Validate if the designated constraints aren't met.
type CreateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemResponseValidationError) ErrorName() string {
	return "CreateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemResponseValidationError{}

// Validate checks the field values on UpdateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateItemRequestValidationError is the validation error returned by
// UpdateItemRequest.Validate if the designated constraints aren't met.
type UpdateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemRequestValidationError) ErrorName() string {
	return "UpdateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemRequestValidationError{}

// Validate checks the field values on UpdateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateItemResponseValidationError is the validation error returned by
// UpdateItemResponse.Validate if the designated constraints aren't met.
type UpdateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemResponseValidationError) ErrorName() string {
	return "UpdateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemResponseValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return DeleteItemRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DeleteItemRequest) _validateUuid(uuid string) error {
	if matched := _items_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}

// Validate checks the field values on DeleteItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteItemResponseValidationError is the validation error returned by
// DeleteItemResponse.Validate if the designated constraints aren't met.
type DeleteItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemResponseValidationError) ErrorName() string {
	return "DeleteItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemResponseValidationError{}

// Validate checks the field values on ListItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListItemRequestValidationError is the validation error returned by
// ListItemRequest.Validate if the designated constraints aren't met.
type ListItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemRequestValidationError) ErrorName() string { return "ListItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemRequestValidationError{}

// Validate checks the field values on ListItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListItemResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListItemResponseValidationError is the validation error returned by
// ListItemResponse.Validate if the designated constraints aren't met.
type ListItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemResponseValidationError) ErrorName() string { return "ListItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemResponseValidationError{}

// Validate checks the field values on FindItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FindItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return FindItemRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *FindItemRequest) _validateUuid(uuid string) error {
	if matched := _items_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FindItemRequestValidationError is the validation error returned by
// FindItemRequest.Validate if the designated constraints aren't met.
type FindItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindItemRequestValidationError) ErrorName() string { return "FindItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindItemRequestValidationError{}

// Validate checks the field values on FindItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FindItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FindItemResponseValidationError is the validation error returned by
// FindItemResponse.Validate if the designated constraints aren't met.
type FindItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindItemResponseValidationError) ErrorName() string { return "FindItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e FindItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindItemResponseValidationError{}

// Validate checks the field values on FilterItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FilterItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			return FilterItemRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *FilterItemRequest) _validateUuid(uuid string) error {
	if matched := _items_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FilterItemRequestValidationError is the validation error returned by
// FilterItemRequest.Validate if the designated constraints aren't met.
type FilterItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterItemRequestValidationError) ErrorName() string {
	return "FilterItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilterItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterItemRequestValidationError{}

// Validate checks the field values on FilterItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FilterItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterItemResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FilterItemResponseValidationError is the validation error returned by
// FilterItemResponse.Validate if the designated constraints aren't met.
type FilterItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterItemResponseValidationError) ErrorName() string {
	return "FilterItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FilterItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterItemResponseValidationError{}
